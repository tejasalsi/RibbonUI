package our.company.name.loan.dao.implementation;

import java.util.List;

import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;

import org.hibernate.Query;
import org.hibernate.SessionFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.mail.MailException;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSenderImpl;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.transaction.annotation.Transactional;

import our.company.name.application.utils.BooleanAndMessages;
import our.company.name.application.utils.EmailUtils;
import our.company.name.application.utils.StringConstants;
import our.company.name.loan.application.enums.UserType;
import our.company.name.loan.application.pojos.User;
import our.company.name.loan.dao.EmailDao;

@SuppressWarnings("serial")
public class EmailDaoImpl implements EmailDao {

	static Logger log = LoggerFactory.getLogger(EmailDao.class);
	private SessionFactory sessionFactory;
	private JavaMailSenderImpl mailSender = null;
	private SimpleMailMessage mailMessage = null;

	@Override
	public BooleanAndMessages sendPasswordInEmail(String emailID,
			String password) {

		MimeMessage message = mailSender.createMimeMessage();
		MimeMessageHelper helper = new MimeMessageHelper(message);

		StringBuilder emailText = new StringBuilder("Hi,");
		emailText.append(StringConstants.NEW_LINE);
		emailText.append(StringConstants.NEW_LINE);
		emailText
				.append("A new password has been automatically generated for you.");
		emailText.append(StringConstants.NEW_LINE);
		emailText.append("Your new password is " + password);
		emailText.append(StringConstants.NEW_LINE);
		emailText.append("Please use this new password for login.");
		emailText.append(StringConstants.NEW_LINE);
		emailText.append(StringConstants.NEW_LINE);
		emailText.append("Thank you");

		try {

			helper.addTo(emailID);

			message.setSubject("Your new autogenerated password ");
			message.setText(emailText.toString());

		} catch (MessagingException e) {
			return new BooleanAndMessages(false, e.getMessage(),
					"Email has not been sent. Please contact your administrator");
		}

		try {

			mailSender.send(message);
			return new BooleanAndMessages(true,
					"Mail has been sent successfully",
					"From now on use new password");

		} catch (MailException ex) {
			// log the error
			log.info(ex.getMessage());
			return new BooleanAndMessages(false, ex.getMessage(),
					"Email has not been sent. Please contact your administrator");

		}
	}

	@Override
	public BooleanAndMessages sendEmail(EmailUtils emailUtils) {

		return null;
	}

	@Transactional
	@Override
	public BooleanAndMessages isEmailIdUnique(String emailId, UserType userType) {

		StringBuilder hqlQuery = new StringBuilder(
				"FROM User U WHERE U.email = '");
		hqlQuery.append(emailId);
		hqlQuery.append("'");

		log.info("Generated HQL Query = {}", hqlQuery.toString());

		Query query = sessionFactory.getCurrentSession().createQuery(
				hqlQuery.toString());

		@SuppressWarnings("unchecked")
		List<User> results = query.list();

		switch (userType) {

		case NewUser:
			if (results.size() != 0) {

				return new BooleanAndMessages(false,
						"New User Cannot be created",
						"Email-ID entered by you is already in use. Please provide a new Email-ID");

			} else {

				return new BooleanAndMessages(true, "Congratulations..!!",
						"Email-Id is available");

			}

		case ForgotPasswordUser:
			if (results.size() == 1) {

				return new BooleanAndMessages(true,
						"Provided Email-ID is registered in DB",
						"New autogenerated password will be sent to this Email-ID");

			} else {

				return new BooleanAndMessages(false,
						"Email-ID is NOT registered in DB for any user",
						"Please provide a registered Email-ID");

			}

			// Execution should not reach here. But if does in some case, throw
			// a Exception and write it into log file

		default:
			return new BooleanAndMessages(false, "There is some problem",
					"Please contact administrator");
		}

	}

	/**
	 * The Default Constructor
	 */
	public EmailDaoImpl() {

	}

	@Override
	public SessionFactory getSessionFactory() {
		return sessionFactory;
	}

	@Override
	public void setSessionFactory(SessionFactory sessionFactory) {
		this.sessionFactory = sessionFactory;
	}

	@Override
	public JavaMailSenderImpl getMailSender() {

		return mailSender;
	}

	@Override
	public void setMailSender(JavaMailSenderImpl mailSender) {

		this.mailSender = mailSender;

	}

	@Override
	public SimpleMailMessage getMailMessage() {
		return mailMessage;
	}

	@Override
	public void setMailMessage(SimpleMailMessage mailMessage) {
		this.mailMessage = mailMessage;
	}

}
